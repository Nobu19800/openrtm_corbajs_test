// RTC.idl


module RTC
{
  //typedef long ExecutionContextHandle_t;

  struct NameValue
  {
    string name;
    //any value;
  };

  typedef sequence<NameValue> NVList;

  enum ReturnCode_t
  {
    RTC_OK,
    RTC_ERROR,
    BAD_PARAMETER,
    UNSUPPORTED,
    OUT_OF_RESOURCES,
    PRECONDITION_NOT_MET
  };

  enum LifeCycleState
  {
    CREATED_STATE,
    INACTIVE_STATE,
    ACTIVE_STATE,
    ERROR_STATE
  };

  enum ExecutionKind
  {
    PERIODIC,
    EVENT_DRIVEN,
    OTHER
  };

  enum PortInterfacePolarity
  {
    PROVIDED,
    REQUIRED
  };

  struct PortInterfaceProfile
  {
    string instance_name;
    string type_name;
    PortInterfacePolarity polarity;
  };

  typedef sequence<PortInterfaceProfile> PortInterfaceProfileList;


  interface ExecutionContext
  {
    boolean is_running();
    ReturnCode_t start();
    ReturnCode_t stop();
    double get_rate();
    ReturnCode_t set_rate(in double rate);
    //ReturnCode_t add_component(in LightweightRTObject comp);
    //ReturnCode_t remove_component(in LightweightRTObject comp);
    //ReturnCode_t activate_component(in LightweightRTObject comp);
    //ReturnCode_t deactivate_component(in LightweightRTObject comp);
    //ReturnCode_t reset_component(in LightweightRTObject comp);
    //LifeCycleState get_component_state(in LightweightRTObject comp);
    ExecutionKind get_kind();
  };

  typedef sequence<ExecutionContext> ExecutionContextList;

  interface LightweightRTObject
  {
    ReturnCode_t initialize();
    ReturnCode_t finalize();
    boolean is_alive(in ExecutionContext exec_context);
    ReturnCode_t exit();
    long attach_context(in ExecutionContext exec_context);
    ReturnCode_t detach_context(in long exec_handle);
    ExecutionContext get_context(in long exec_handle);
    ExecutionContextList get_owned_contexts();
    ExecutionContextList get_participating_contexts();
    long get_context_handle(in ExecutionContext cxt);

  };

  struct ConnectorProfile
  {
    string name;
    string connector_id;
    //PortServiceList ports;
    NVList properties;
  };

  typedef sequence<ConnectorProfile> ConnectorProfileList;
  
  interface RTObject
  {
  };

  struct PortProfile
  {
    string name;
    PortInterfaceProfileList interfaces;
    //PortService port_ref;
    ConnectorProfileList connector_profiles;
    RTObject owner;
    NVList properties;
  };


  interface PortService
  {
    PortProfile get_port_profile();
    ConnectorProfileList get_connector_profiles();
    ConnectorProfile get_connector_profile(in string connector_id);
    //ReturnCode_t connect(inout ConnectorProfile connector_profile);
    ReturnCode_t connect(in ConnectorProfile connector_profile);
    ReturnCode_t disconnect(in string connector_id);
    ReturnCode_t disconnect_all();
    //ReturnCode_t notify_connect(inout ConnectorProfile connector_profile);
    ReturnCode_t notify_connect(in ConnectorProfile connector_profile);
    ReturnCode_t notify_disconnect(in string connector_id);
  };

};